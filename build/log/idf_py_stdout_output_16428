[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Users\mikel\OneDrive\Desktop\Prelude\Code\hello_world\build\bootloader\esp-idf\esptool_py && C:\Users\mikel\.espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Users/mikel/esp-adf/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 C:/Users/mikel/OneDrive/Desktop/Prelude/Code/hello_world/build/bootloader/bootloader.bin"
Bootloader binary size 0x6570 bytes. 0x1a90 bytes (21%) free.
[2/8] Building C object esp-idf/include/CMakeFiles/__idf_include.dir/spi_task_manager.c.obj
[3/8] Linking C static library esp-idf\include\libinclude.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable hello_world.elf
[6/8] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated C:/Users/mikel/OneDrive/Desktop/Prelude/Code/hello_world/build/hello_world.bin
[7/8] cmd.exe /C "cd /D C:\Users\mikel\OneDrive\Desktop\Prelude\Code\hello_world\build\esp-idf\esptool_py && C:\Users\mikel\.espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Users/mikel/esp-adf/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Users/mikel/OneDrive/Desktop/Prelude/Code/hello_world/build/partition_table/partition-table.bin C:/Users/mikel/OneDrive/Desktop/Prelude/Code/hello_world/build/hello_world.bin"
hello_world.bin binary size 0x3b380 bytes. Smallest app partition is 0x100000 bytes. 0xc4c80 bytes (77%) free.
[7/8] cmd.exe /C "cd /D C:\Users\mikel\esp-adf\esp-idf\components\esptool_py && C:\Users\mikel\.espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Users/mikel/esp-adf/esp-idf -D SERIAL_TOOL=C:/Users/mikel/.espressif/python_env/idf5.3_py3.11_env/Scripts/python.exe;;C:/Users/mikel/esp-adf/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32s3 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/Users/mikel/OneDriveesptool.py --chip esp32s3 -p COM9 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 2MB 0x0 bootloader/bootloader.bin 0x10000 hello_world.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.8.1
Serial port COM9
Connecting...
Chip is ESP32-S3 (QFN56) (revision v0.2)
Features: WiFi, BLE
Crystal is 40MHz
MAC: 34:cd:b0:08:bd:e8
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00006fff...
Flash will be erased from 0x00010000 to 0x0004bfff...
Flash will be erased from 0x00008000 to 0x00008fff...
SHA digest in image updated
Compressed 25968 bytes to 15055...
Writing at 0x00000000... (100 %)
Wrote 25968 bytes (15055 compressed) at 0x00000000 in 0.3 seconds (effective 626.6 kbit/s)...
Hash of data verified.
Compressed 242560 bytes to 126400...
Writing at 0x00010000... (12 %)
Writing at 0x0001c84c... (25 %)
Writing at 0x000245d9... (37 %)
Writing at 0x0002b163... (50 %)
Writing at 0x0003123f... (62 %)
Writing at 0x0003a29c... (75 %)
Writing at 0x0003ffe1... (87 %)
Writing at 0x000468b7... (100 %)
Wrote 242560 bytes (126400 compressed) at 0x00010000 in 1.8 seconds (effective 1101.0 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 715.8 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
/Desktop/Prelude/Code/hello_world/build -P C:/Users/mikel/esp-adf/esp-idf/components/esptool_py/run_serial_tool.cmake"
